trainset = subset(stock, split == T)
testset = subset(stock, split == F)
library(caret)
trans = preProcess(trainset[-1], method = c('scale', 'pca'), pcaComp = 2)
trainset = predict(trans, trainset)
testset = predict(trans, testset)
View(testset)
stockfit = lm(`stock price ` ~ ., data = trainset)
plot(trainset)
stockpred = predict(stockfit, newdata = testset[-1])
table(testset[1], stockpred)
cm = table(testset[1], stockpred)
summary(stockfit)
rm(stockpred)
plot(trainset$`stock price `, trainset$PC1)
plot(trainset$`stock price `, trainset$PC2)
library(readxl)
setwd('/Users/Gaelan/Downloads/##Data/')
stock = read_excel('stkpc_analysis.xlsx')
stock_pca = princomp(stock[, -1])
summary(stock_pca)
screeplot(stock_pca, type = 'line',
main = 'PCA on Stock Price')
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(stock$`stock price `, SplitRatio = 0.8)
trainset = subset(stock, split == T)
testset = subset(stock, split == F)
# install.packages('caret')
library(caret)
trans = preProcess(trainset[-1], method = c('scale', 'pca'), pcaComp = 2)
trainset = predict(trans, trainset)
testset = predict(trans, testset)
library(ggbiplot)
library(ggbiplot)
s = ggbiplot(stock_pca)
print(s)
library(ggbiplot)
s = ggbiplot(stock_pca, obs.scale = 1, var.scale = 1,
ellipse = T, circle = T)
print(s)
library(ggbiplot)
s = ggbiplot(stock_pca, obs.scale = 1, var.scale = 1,
ellipse = T, circle = T)
s = s + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(s)
library(ggbiplot)
s = ggbiplot(stock_pca, obs.scale = 1, var.scale = 1,
ellipse = T, circle = T)
g = g + scale_color_discrete(name = '')
library(ggbiplot)
s = ggbiplot(stock_pca, obs.scale = 1, var.scale = 1,
ellipse = T, circle = T)
s = s + scale_color_discrete(name = '')
s = s + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(s)
library(ggbiplot)
s = ggbiplot(stock_pca, obs.scale = 1, var.scale = 1,
ellipse = T, circle = T)
print(s)
library(ggbiplot)
s = ggbiplot(stock_pca, obs.scale = 1, var.scale = 1,
ellipse = T, circle = T)
print(s + coord_cartesian(xlim = c(-200, 0), ylim = c(0, 200)))
library(ggbiplot)
s = ggbiplot(stock_pca, obs.scale = 1, var.scale = 1,
ellipse = T, circle = T)
print(s + coord_cartesian(xlim = c(-200, 200), ylim = c(-200, 200)))
library(readxl)
setwd('/Users/Gaelan/Downloads/##Data/')
stock = read_excel('stkpc_analysis.xlsx')
stock_pca = princomp(stock[, -1])
summary(stock_pca)
screeplot(stock_pca, type = 'line',
main = 'PCA on Stock Price')
library(ggbiplot)
s = ggbiplot(stock_pca, obs.scale = 1, var.scale = 1,
ellipse = T, circle = T)
print(s + coord_cartesian(xlim = c(-200, 200), ylim = c(-200, 200)))
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(stock$`stock price `, SplitRatio = 0.8)
trainset = subset(stock, split == T)
testset = subset(stock, split == F)
# install.packages('caret')
library(caret)
trans = preProcess(trainset[-1], method = c('scale', 'pca'), pcaComp = 2)
trainset = predict(trans, trainset)
testset = predict(trans, testset)
warnings()
library(readxl)
setwd('/Users/Gaelan/Downloads/##Data/')
stock = read_excel('stkpc_analysis.xlsx')
stock_pca = princomp(stock[, -1])
summary(stock_pca)
screeplot(stock_pca, type = 'line',
main = 'PCA on Stock Price')
library(ggbiplot)
s = ggbiplot(stock_pca, obs.scale = 1, var.scale = 1,
ellipse = T, circle = T)
print(s + coord_cartesian(xlim = c(-200, 200), ylim = c(-200, 200)))
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(stock$`stock price `, SplitRatio = 0.8)
trainset = subset(stock, split == T)
testset = subset(stock, split == F)
# install.packages('caret')
library(caret)
trans = preProcess(trainset[-1], method = c('scale', 'pca'), pcaComp = 2)
trainset = predict(trans, trainset)
testset = predict(trans, testset)
library(readxl)
setwd('/Users/Gaelan/Downloads/##Data/')
stock = read_excel('stkpc_analysis.xlsx')
stock_pca = princomp(stock[, -1])
summary(stock_pca)
screeplot(stock_pca, type = 'line',
main = 'PCA on Stock Price')
library(ggbiplot)
s = ggbiplot(stock_pca, obs.scale = 1, var.scale = 1,
ellipse = T, circle = T)
print(s + coord_cartesian(xlim = c(-200, 200), ylim = c(-200, 200)))
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(stock$`stock price `, SplitRatio = 0.8)
trainset = subset(stock, split == T)
testset = subset(stock, split == F)
# install.packages('caret')
library(caret)
trans = preProcess(trainset[-1], method = c('scale', 'pca'), pcaComp = 2)
trainset = predict(trans, trainset)
testset = predict(trans, testset)
suppressWarnings(setwd('/Users/Gaelan/Downloads/##Data/'))
stock = read_excel('stkpc_analysis.xlsx')
setwd('/Users/Gaelan/Downloads/##Data/')
stock = read_excel('stkpc_analysis.xlsx')
setwd("~/Downloads/##Data")
stock = read_excel('stkpc_analysis.xlsx')
library(readxl)
setwd('/Users/Gaelan/Downloads/##Data/')
stock = read_excel('stkpc_analysis.xlsx')
stock_pca = princomp(stock[, -1])
summary(stock_pca)
screeplot(stock_pca, type = 'line',
main = 'PCA on Stock Price')
library(ggbiplot)
s = ggbiplot(stock_pca, obs.scale = 1, var.scale = 1,
ellipse = T, circle = T)
print(s + coord_cartesian(xlim = c(-200, 200), ylim = c(-200, 200)))
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(stock$`stock price `, SplitRatio = 0.8)
trainset = subset(stock, split == T)
testset = subset(stock, split == F)
# install.packages('caret')
library(caret)
trans = preProcess(trainset[-1], method = c('scale', 'pca'), pcaComp = 2)
trainset = predict(trans, trainset)
testset = predict(trans, testset)
stockfit = lm(`stock price ` ~ ., data = trainset)
summary(stockfit)
knit_with_parameters('~/Dropbox/# NUS/16-17 SEM 2/EBAC Project/AA Assignment/Assignment 1 - PCA & Factor Analysis/stock.Rmd')
stockfit = lm(`stock price ` ~ PC1, data = trainset)
summary(stockfit)
stockfit = lm(`stock price ` ~ PC1 + PC1^2, data = trainset)
summary(stockfit)
stockfit = lm(`stock price ` ~ PC1 + PC1^2 + PC1^3, data = trainset)
summary(stockfit)
stockfit = lm(`stock price ` ~ ., data = trainset)
summary(stockfit)
stockfit = lm(log(`stock price `) ~ log(.), data = trainset)
stockfit = lm(log(`stock price `) ~ ., data = trainset)
summary(stockfit)
trainset_log = log(trainset)
stockfit = lm(`stock price ` ~ ., data = trainset_log)
summary(stockfit)
stockfit = lm(`stock price ` ~ ., data = trainset)
summary(stockfit)
rm(stockfit_log)
rm(trainset_log)
rm(log.ir)
summary(stockfit)
cor(trainset)
corrplot(cor(trainset))
??corrplot
corrplot(cor(trainset))
install.packages(corrplot)
install.packages('corrplot')
library(corrplot)
corrplot(cor(trainset))
corrplot(cor(trainset), method = 'number')
corrplot(cor(trainset), method = 'shade')
corrplot(cor(trainset), method = 'square')
corrplot(cor(trainset), method = 'color')
setwd('/Users/Gaelan/Dropbox/Documents/# Courses/Machine Learning/Part 4 - Clustering/Section 24 - K-Means Clustering')
dataset = read.csv('Mall_Customers.csv')
x = dataset[4:5]
# Using the elbow method to find the optimal number of clusters
set.seed(6)
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(x, i)$withinss)
plot(1:10, wcss, type = 'b',
main = paste('Clusters of clients'),
xlab = 'Number of clusters',
ylab = 'WCSS')
# optimal number of clusters is 5
# Applying k-means to the mall dataset
set.seed(29)
kmeans = kmeans(x, 5, iter.max = 300, nstart = 10)
y_kmeans = kmeans$cluster
# Visualizing the clusters (2-dimensional only)
library(cluster)
clusplot(x,
y_kmeans,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of clients'),
xlab = 'Annual Income',
ylab = 'Spending Income')
View(dataset)
library(readxl)
setwd('/Users/Gaelan/Downloads/##Data/')
stock = read_excel('stkpc_analysis.xlsx')
stock_pca = princomp(stock[, -1])
summary(stock_pca)
screeplot(stock_pca, type = 'line',
main = 'PCA on Stock Price')
library(ggbiplot)
s = ggbiplot(stock_pca, obs.scale = 1, var.scale = 1,
ellipse = T, circle = T)
print(s + coord_cartesian(xlim = c(-200, 200), ylim = c(-200, 200)))
# install.packages('caret')
library(caret)
trans = preProcess(stock[-1], method = c('scale', 'pca'), pcaComp = 2)
stock = predict(trans, stock)
stockfit = lm(`stock price ` ~ ., data = stock)
summary(stockfit)
trans = preProcess(stock[-1], method = c('scale', 'pca'), pcaComp = 3)
# install.packages('caret')
library(caret)
trans = preProcess(stock[-1], method = c('scale', 'pca'), pcaComp = 3)
stock = predict(trans, stock)
stockfit = lm(`stock price ` ~ ., data = stock)
summary(stockfit)
library(readxl)
setwd('/Users/Gaelan/Downloads/##Data/')
stock = read_excel('stkpc_analysis.xlsx')
stock_pca = princomp(stock[, -1])
summary(stock_pca)
screeplot(stock_pca, type = 'line',
main = 'PCA on Stock Price')
library(ggbiplot)
s = ggbiplot(stock_pca, obs.scale = 1, var.scale = 1,
ellipse = T, circle = T)
print(s + coord_cartesian(xlim = c(-200, 200), ylim = c(-200, 200)))
stock_pca$loadings
print(stock_pca)
summary(stock_pca)
stock_pca
eigen(stock_pca)
getEigenValues(stock_pca)
set.seed(6)
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(stock[-1], i)$withinss)
plot(1:10, wcss, type = 'b',
main = paste('Clusters of clients'),
xlab = 'Number of clusters',
ylab = 'WCSS')
# K-Means Clustering
# Importing the Mall dataset
setwd('/Users/Gaelan/Dropbox/Documents/# Courses/Machine Learning/Part 4 - Clustering/Section 24 - K-Means Clustering')
dataset = read.csv('Mall_Customers.csv')
x = dataset[4:5]
# Using the elbow method to find the optimal number of clusters
set.seed(6)
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(x, i)$withinss)
plot(1:10, wcss, type = 'b',
main = paste('Clusters of clients'),
xlab = 'Number of clusters',
ylab = 'WCSS')
# optimal number of clusters is 5
# Applying k-means to the mall dataset
set.seed(29)
kmeans = kmeans(x, 5, iter.max = 300, nstart = 10)
y_kmeans = kmeans$cluster
# Visualizing the clusters (2-dimensional only)
library(cluster)
clusplot(x,
y_kmeans,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of clients'),
xlab = 'Annual Income',
ylab = 'Spending Income')
set.seed(6)
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(stock[-1], i)$withinss)
plot(1:10, wcss, type = 'b',
main = paste('Clusters of companies'),
xlab = 'Number of clusters',
ylab = 'WCSS')
set.seed(6)
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(stock[-1], i)$withinss)
plot(1:10, wcss, type = 'b',
main = paste('Clusters of companies'),
xlab = 'Number of clusters',
ylab = 'WCSS')
set.seed(123)
kmeans = kmeans(stock[-1], 4, iter.max = 300, nstart = 10)
y_kmeans = kmeans$cluster
stock_pca = prcomp(stock[-1])
summary(stock_pca)
screeplot(stock_pca, type = 'line',
main = 'PCA on Stock Price')
library(ggbiplot)
s = ggbiplot(stock_pca, obs.scale = 1, var.scale = 1,
ellipse = T, circle = T)
print(s + coord_cartesian(xlim = c(-200, 200), ylim = c(-200, 200)))
set.seed(123)
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(stock[-1], i)$withinss)
plot(1:10, wcss, type = 'b',
main = paste('Clusters of companies'),
xlab = 'Number of clusters',
ylab = 'WCSS')
stock_pca$x
set.seed(123)
kmeans = kmeans(stock[-1], 4, iter.max = 300, nstart = 10)
y_kmeans = kmeans$cluster
x = as.data.frame(stock_pca$x)
x = as.data.frame(stock_pca$x)
set.seed(123)
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(x, i)$withinss)
plot(1:10, wcss, type = 'b',
main = paste('Clusters of companies'),
xlab = 'Number of clusters',
ylab = 'WCSS')
set.seed(123)
kmeans = kmeans(x, 4, iter.max = 300, nstart = 10)
y_kmeans = kmeans$cluster
# Visualizing the clusters (2-dimensional only)
library(cluster)
clusplot(x,
y_kmeans,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of companies'),
xlab = 'PC1',
ylab = 'PC2')
x
stock1 = as.data.frame(stock_pca$x)
set.seed(123)
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(x, i)$withinss)
plot(1:10, wcss, type = 'b',
main = paste('Clusters of companies'),
xlab = 'Number of clusters',
ylab = 'WCSS')
set.seed(123)
kmeans = kmeans(stock2, centers = 4, iter.max = 300, nstart = 10)
set.seed(123)
kmeans = kmeans(stock1, centers = 4, iter.max = 300, nstart = 10)
y_kmeans = kmeans$cluster
# Visualizing the clusters (2-dimensional only)
library(cluster)
clusplot(stock1,
y_kmeans,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of companies'),
xlab = 'PC1',
ylab = 'PC2')
# K-Means Clustering
# Importing the Mall dataset
setwd('/Users/Gaelan/Dropbox/Documents/# Courses/Machine Learning/Part 4 - Clustering/Section 24 - K-Means Clustering')
dataset = read.csv('Mall_Customers.csv')
x = dataset[4:5]
# Using the elbow method to find the optimal number of clusters
set.seed(6)
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(x, i)$withinss)
plot(1:10, wcss, type = 'b',
main = paste('Clusters of clients'),
xlab = 'Number of clusters',
ylab = 'WCSS')
# optimal number of clusters is 5
# Applying k-means to the mall dataset
set.seed(29)
kmeans = kmeans(x, 5, iter.max = 300, nstart = 10)
y_kmeans = kmeans$cluster
# Visualizing the clusters (2-dimensional only)
library(cluster)
clusplot(x,
y_kmeans,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of clients'),
xlab = 'Annual Income',
ylab = 'Spending Income')
x
y_kmeans
y_kmeans
set.seed(123)
kmeans = kmeans(stock1, centers = 4, iter.max = 300, nstart = 10)
y_kmeans = kmeans$cluster
y_kmeans
set.seed(123)
kmeans = kmeans(stock1, centers = 3, iter.max = 300, nstart = 10)
y_kmeans = kmeans$cluster
kmeans$cluster
set.seed(123)
kmeans = kmeans(stock1, centers = 4, iter.max = 300, nstart = 10)
y_kmeans = kmeans$cluster
# Visualizing the clusters (2-dimensional only)
library(cluster)
clusplot(stock1[1:2],
y_kmeans,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of companies'),
xlab = 'PC1',
ylab = 'PC2')
stock_price = stock[1]
stockfit = lm(stock_price ~ PC1 + PC2 + PC3 + PC4, data = stock1)
stock_price = stock[, 1]
stockfit = lm(stock_price ~ PC1 + PC2 + PC3 + PC4, data = stock1)
summary(stockfit)
stockfit = lm(stock_price ~ stock1$PC1 + stock1$PC2 + stock1$PC3 + stock1$PC4, data = stock1)
stockfit = lm(formula = stock_price ~ stock1$PC1 + stock1$PC2 + stock1$PC3 + stock1$PC4,
data = stock1)
stock1$stock_price = stock[, 1]
stock1$stock_price = stock[, 1]
stockfit = lm(formula = stock_price ~ PC1 + PC2 + PC3 + PC4,
data = stock1)
stock1
stock[, 1]
stock_pca = prcomp(stock[, -1], center = T, scale. = T)
stock_price = stock[, 1]
stock_price
screeplot(stock_pca, type = 'line',
main = 'PCA on Stock Price')
stock_pca = prcomp(stock[, -1], scale. = T)
stock_price = stock[, 1]
summary(stock_pca)
screeplot(stock_pca, type = 'line',
main = 'PCA on Stock Price')
stock_pca = prcomp(stock[, -1])
stock_price = stock[, 1]
summary(stock_pca)
screeplot(stock_pca, type = 'line',
main = 'PCA on Stock Price')
library(ggbiplot)
s = ggbiplot(stock_pca, obs.scale = 1, var.scale = 1,
ellipse = T, circle = T)
print(s + coord_cartesian(xlim = c(-200, 200), ylim = c(-200, 200)))
stock1$stock_price = stock[, 1]
stockfit = lm(formula = stock_price ~ PC1 + PC2 + PC3 + PC4,
data = stock1)
stock1$stock_price = stock_price
stockfit = lm(formula = stock_price ~ PC1 + PC2 + PC3 + PC4,
data = stock1)
typeof(stock_price)
stock1$stock_price = as.matrix(stock[, 1])
typeof(stock_price)
stockfit = lm(formula = stock_price ~ PC1 + PC2 + PC3 + PC4,
data = stock1)
summary(stockfit)
plot(stockfit)
par(mfrow = c(2, 2))
plot(stockfit)
par(mfrow = c(2, 2))
plot(stockfit)
dev.off()
par(mfrow = c(2, 2))
plot(stockfit)
dev.off()
par(mfrow = c(2, 2))
plot(stockfit)
