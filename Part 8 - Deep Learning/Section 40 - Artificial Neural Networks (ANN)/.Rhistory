ChrisBosh_FT,
ChrisPaul_FT,
KevinDurant_FT,
DerrickRose_FT,
DwayneWade_FT)
rownames(FreeThrows) <- Players
colnames(FreeThrows) <- Seasons
FreeThrows
KobeBryant_FTA <- c(819,768,742,564,541,583,451,626,21,241)
JoeJohnson_FTA <- c(330,314,379,362,269,243,186,161,195,176)
LeBronJames_FTA <- c(814,701,771,762,773,663,502,535,585,528)
CarmeloAnthony_FTA <- c(709,568,590,468,612,605,367,512,541,237)
DwightHoward_FTA <- c(598,666,897,849,816,916,572,721,638,271)
ChrisBosh_FTA <- c(581,590,559,617,590,471,279,302,272,232)
ChrisPaul_FTA <- c(465,357,390,524,190,384,302,323,345,321)
KevinDurant_FTA <- c(256,256,448,524,840,675,501,750,805,171)
DerrickRose_FTA <- c(205,205,205,250,338,555,239,0,32,187)
DwayneWade_FTA <- c(803,535,467,771,702,652,297,425,258,370)
FreeThrowAtt <- rbind(KobeBryant_FTA,
JoeJohnson_FTA,
LeBronJames_FTA,
CarmeloAnthony_FTA,
DwightHoward_FTA,
ChrisBosh_FTA,
ChrisPaul_FTA,
KevinDurant_FTA,
DerrickRose_FTA,
DwayneWade_FTA)
rownames(FreeThrowAtt) <- Players
colnames(FreeThrowAtt) <- Seasons
myplot(FreeThrowAtt / Games)
myplot(FreeThrows / FreeThrowAtt)
myplot((Points - FreeThrows) / FieldGoals)
myplot(FreeThrows / FreeThrowAtt)
myplot((Points - FreeThrows) / FieldGoals)
stats <- read.csv(file.choose())
stats
getwd()
rm(stats)
stats <- read.csv("DemographicData.csv")
nrow(stats)
ncol(stats)
head(stats)
tail(stats)
str(stats)
summary(stats)
head(stats)
stat[3,3]
stats[3,3]
stats[3, "Birth.rate"]
stats$Internet.users
stats$Internet.users[2]
levels(stats$Income.Group)
?$
stats[1:10,]
stats[3:9,]
stats[c(4,100),]
stats[1,]
is.data.frame(stats[1,])
stats[,1]
is.dataframe(stats[,1])
is.data.frame(stats[,1])
is.data.frame(stats[,1,drop=F])
head(stats)
stats$Birth.rate * stats$Internet.users
stats$MyCalc <- stats$Birth.rate * stats$Internet.users
head(stats)
stats$xyz <- 1:5
head(stats)
head(stats, n=10)
stats$MyCalc <- NULL
stats$xyz <- NULL
head(stats)
head(stats)
stats$Internet.users < 2
filter <- stats$Internet.users < 2
stats[filter,]
stats[stats$Birth.rate > 40,]
stats[stats$Birth.rate > 40 & stats$Internet.users < 2,]
stats[stats$Income.Group == "High incomes",]
stats[stats$Income.Group == "High income",]
levels(stats$Income.Group)
stats[stats$Country.Name == "Malta"]
stats[stats$Country.Name == "Malta",]
hw <- read.csv("Section5-Homework-Data.csv")
str(hw)
data1960 <- hw[hw$Year == 1960,]
data2013 <- hw[hw$Year == 2013,]
data1960 <- cbind(data1960, Life_Expectancy_At_Birth_1960)
Life_Expectancy_At_Birth_1960 <- c(65.5693658536586,32.328512195122,32.9848292682927,62.2543658536585,52.2432195121951,65.2155365853659,65.8634634146342,61.7827317073171,70.8170731707317,68.5856097560976,60.836243902439,41.2360487804878,69.7019512195122,37.2782682926829,34.4779024390244,45.8293170731707,69.2475609756098,52.0893658536585,62.7290487804878,60.2762195121951,67.7080975609756,59.9613658536585,42.1183170731707,54.2054634146342,60.7380487804878,62.5003658536585,32.3593658536585,50.5477317073171,36.4826341463415,71.1331707317073,71.3134146341463,57.4582926829268,43.4658048780488,36.8724146341463,41.523756097561,48.5816341463415,56.716756097561,41.4424390243903,48.8564146341463,60.5761951219512,63.9046585365854,69.5939268292683,70.3487804878049,69.3129512195122,44.0212682926829,72.1765853658537,51.8452682926829,46.1351219512195,53.215,48.0137073170732,37.3629024390244,69.1092682926829,67.9059756097561,38.4057073170732,68.819756097561,55.9584878048781,69.8682926829268,57.5865853658537,39.5701219512195,71.1268292682927,63.4318536585366,45.8314634146342,34.8863902439024,32.0422195121951,37.8404390243902,36.7330487804878,68.1639024390244,59.8159268292683,45.5316341463415,61.2263414634146,60.2787317073171,66.9997073170732,46.2883170731707,64.6086585365854,42.1000975609756,68.0031707317073,48.6403170731707,41.1719512195122,69.691756097561,44.945512195122,48.0306829268293,73.4286585365854,69.1239024390244,64.1918292682927,52.6852682926829,67.6660975609756,58.3675853658537,46.3624146341463,56.1280731707317,41.2320243902439,49.2159756097561,53.0013170731707,60.3479512195122,43.2044634146342,63.2801219512195,34.7831707317073,42.6411951219512,57.303756097561,59.7471463414634,46.5107073170732,69.8473170731707,68.4463902439024,69.7868292682927,64.6609268292683,48.4466341463415,61.8127804878049,39.9746829268293,37.2686341463415,57.0656341463415,60.6228048780488,28.2116097560976,67.6017804878049,42.7363902439024,63.7056097560976,48.3688048780488,35.0037073170732,43.4830975609756,58.7452195121951,37.7736341463415,59.4753414634146,46.8803902439024,58.6390243902439,35.5150487804878,37.1829512195122,46.9988292682927,73.3926829268293,73.549756097561,35.1708292682927,71.2365853658537,42.6670731707317,45.2904634146342,60.8817073170732,47.6915853658537,57.8119268292683,38.462243902439,67.6804878048781,68.7196097560976,62.8089268292683,63.7937073170732,56.3570487804878,61.2060731707317,65.6424390243903,66.0552926829268,42.2492926829268,45.6662682926829,48.1876341463415,38.206,65.6598292682927,49.3817073170732,30.3315365853659,49.9479268292683,36.9658780487805,31.6767073170732,50.4513658536585,59.6801219512195,69.9759268292683,68.9780487804878,73.0056097560976,44.2337804878049,52.768243902439,38.0161219512195,40.2728292682927,54.6993170731707,56.1535365853659,54.4586829268293,33.7271219512195,61.3645365853659,62.6575853658537,42.009756097561,45.3844146341463,43.6538780487805,43.9835609756098,68.2995365853659,67.8963902439025,69.7707317073171,58.8855365853659,57.7238780487805,59.2851219512195,63.7302195121951,59.0670243902439,46.4874878048781,49.969512195122,34.3638048780488,49.0362926829268,41.0180487804878,45.1098048780488,51.5424634146342)
Life_Expectancy_At_Birth_2013 <- c(75.3286585365854,60.0282682926829,51.8661707317073,77.537243902439,77.1956341463415,75.9860975609756,74.5613658536585,75.7786585365854,82.1975609756098,80.890243902439,70.6931463414634,56.2516097560976,80.3853658536585,59.3120243902439,58.2406341463415,71.245243902439,74.4658536585366,76.5459512195122,75.0735365853659,76.2769268292683,72.4707317073171,69.9820487804878,67.9134390243903,74.1224390243903,75.3339512195122,78.5466585365854,69.1029268292683,64.3608048780488,49.8798780487805,81.4011219512195,82.7487804878049,81.1979268292683,75.3530243902439,51.2084634146342,55.0418048780488,61.6663902439024,73.8097317073171,62.9321707317073,72.9723658536585,79.2252195121951,79.2563902439025,79.9497804878049,78.2780487804878,81.0439024390244,61.6864634146342,80.3024390243903,73.3199024390244,74.5689512195122,75.648512195122,70.9257804878049,63.1778780487805,82.4268292682927,76.4243902439025,63.4421951219512,80.8317073170732,69.9179268292683,81.9682926829268,68.9733902439024,63.8435853658537,80.9560975609756,74.079512195122,61.1420731707317,58.216487804878,59.9992682926829,54.8384146341464,57.2908292682927,80.6341463414634,73.1935609756098,71.4863902439024,78.872512195122,66.3100243902439,83.8317073170732,72.9428536585366,77.1268292682927,62.4011463414634,75.2682926829268,68.7046097560976,67.6604146341463,81.0439024390244,75.1259756097561,69.4716829268293,83.1170731707317,82.290243902439,73.4689268292683,73.9014146341463,83.3319512195122,70.45,60.9537804878049,70.2024390243902,67.7720487804878,65.7665853658537,81.459756097561,74.462756097561,65.687243902439,80.1288780487805,60.5203902439024,71.6576829268293,74.9127073170732,74.2402926829268,49.3314634146342,74.1634146341464,81.7975609756098,73.9804878048781,80.3391463414634,73.7090487804878,68.811512195122,64.6739024390244,76.6026097560976,76.5326585365854,75.1870487804878,57.5351951219512,80.7463414634146,65.6540975609756,74.7583658536585,69.0618048780488,54.641512195122,62.8027073170732,74.46,61.466,74.567512195122,64.3438780487805,77.1219512195122,60.8281463414634,52.4421463414634,74.514756097561,81.1048780487805,81.4512195121951,69.222,81.4073170731707,76.8410487804878,65.9636829268293,77.4192195121951,74.2838536585366,68.1315609756097,62.4491707317073,76.8487804878049,78.7111951219512,80.3731707317073,72.7991707317073,76.3340731707317,78.4184878048781,74.4634146341463,71.0731707317073,63.3948292682927,74.1776341463415,63.1670487804878,65.878756097561,82.3463414634146,67.7189268292683,50.3631219512195,72.4981463414634,55.0230243902439,55.2209024390244,66.259512195122,70.99,76.2609756097561,80.2780487804878,81.7048780487805,48.9379268292683,74.7157804878049,51.1914878048781,59.1323658536585,74.2469268292683,69.4001707317073,65.4565609756098,67.5223658536585,72.6403414634147,70.3052926829268,73.6463414634147,75.1759512195122,64.2918292682927,57.7676829268293,71.159512195122,76.8361951219512,78.8414634146341,68.2275853658537,72.8108780487805,74.0744146341464,79.6243902439024,75.756487804878,71.669243902439,73.2503902439024,63.583512195122,56.7365853658537,58.2719268292683,59.2373658536585,55.633)
data1960 <- cbind(data1960, Life_Expectancy_At_Birth_1960)
colnames(data1960) <- c("Country", "Code", "Region", "Year", "Fertility.Rate", "Life.Expectancy")
head(data1960)
data2013 <- cbind(data2013, Life_Expectancy_At_Birth_2013)
colnames(data2013) <- c("Country", "Code", "Region", "Year", "Fertility.Rate", "Life.Expectancy")
head(data2013)
qplot(data=data1960, x=Fertility.Rate, y=Life.Expectancy, colour=Region,
main="Life Expectancy vs Fertility Rate (1960)")
library(ggplot2)
qplot(data=data1960, x=Fertility.Rate, y=Life.Expectancy, colour=Region,
main="Life Expectancy vs Fertility Rate (1960)")
qplot(data=data2013, x=Fertility.Rate, y=Life.Expectancy, colour=Region,
main="Life Expectancy vs Fertility Rate (2013)")
rm(Life_Expectancy_At_Birth_1960)
rm(Life_Expectancy_At_Birth_2013)
qplot(data=data1960, x=Fertility.Rate, y=Life.Expectancy, colour=Region,
size=I(5), alpha=I(0.6)
main="Life Expectancy vs Fertility Rate (1960)")
qplot(data=data1960, x=Fertility.Rate, y=Life.Expectancy, colour=Region,
size=I(5), alpha=I(0.6),
main="Life Expectancy vs Fertility Rate (1960)")
qplot(data=data2013, x=Fertility.Rate, y=Life.Expectancy, colour=Region,
size=I(5), alpha=I(0.6),
main="Life Expectancy vs Fertility Rate (2013)")
movies <- read.csv("Movie-Ratings.csv")
head(movies)
colnames(movies) <- c("Film", "Genre", "CriticRating", "AudienceRating", "BudgetMillions", "Year")
factor(movies$Year)
movies$Year <- factor(movies$Year)
summary(movies)
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating))
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating)) +
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating)) +
geom_point()
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating)) +
geom_point()
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating, colour=Genre)) +
geom_point()
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre,size=BudgetMillions)) +
geom_point()
p <- ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre,size=BudgetMillions))
#point
p + geom_point()
#lines
p + geom_line()
#multiple layers
p + geom_line() + geom_point()
#------------------------------- Overriding Aesthetics
q <- ggplot(data=movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=BudgetMillions))
#add geom layer
q + geom_point()
#overriding aes
#ex1
q + geom_point(aes(size=CriticRating))
#ex2
q + geom_point(aes(colour=BudgetMillions))
#q remains the same
q + geom_point()
#ex3
q + geom_point(aes(x=BudgetMillions)) +
xlab("Budget Millions $$$")
#Budget does not really affect rating
#ex4
q + geom_line() + geom_point()
#reduce line size (no need for aes() as
#this is setting aes not mapping aes)
q + geom_line(size=1) + geom_point()
#------------------------------- Mapping vs Setting
r <- ggplot(data=movies, aes(x=CriticRating, y=AudienceRating))
r + geom_point()
#add colour
#1. Mapping (what we've done so far)
r + geom_point(aes(colour=Genre))
#2. Setting
r + geom_point(colour="DarkGreen")
#ERROR:
#r + geom_point(aes(colour="DarkGreen"))
#you are mapping colour to "DarkGreen" variable
#you MAP VARIABLES using aes() and SET ACTUAL VALUES
#1. Mapping
r + geom_point(aes(size=BudgetMillions))
#2. Setting
r + geom_point(size=10)
#ERROR:
#r + geom_point(aes(size=10))
s <- ggplot(data=movies, aes(x=BudgetMillions))
s + geom_histogram(binwidth=10)
s + geom_histogram(binwidth=10, fill="Green")
s + geom_histogram(binwidth=10, aes(fill=Genre))
s + geom_histogram(binwidth=10, aes(fill=Genre), colour="Black")
s + geom_density()
s + geom_density(aes(fill=Genre))
s + geom_density(aes(fill=Genre), position="stack")
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth=10,
fill="White", colour="Blue")
t <- ggplot(data=movies)
t + geom_histogram(binwidth=10,
aes(x=AudienceRating),
fill="White", colour="Blue")
aes(x=CriticRating),
t + geom_histogram(binwidth=10,
aes(x=CriticRating),
fill="White", colour="Blue")
read.csv("Section6-Homework-Data")
s6data <- read.csv("Section6-Homework-Data.csv")
head(s6data)
s6data <- read.csv("Section6-Homework-Data.csv")
head(s6data)
?geom_boxplot
str(s6data)
summary(s6data)
ggplot(data=s6data) + geom_boxplot(aes(x=Genre, y=Gross % US))
ggplot(data=s6data) + geom_boxplot(aes(x=Genre, y="Gross % US"))
mov <- read.csv("Section6-Homework-Data.csv")
head(mov) #top rows
str(mov) #structure of the dataset
library(ggplot2)
ggplot(data=mov, aes(x=Day.of.Week)) + geom_bar()
filt <- (mov$Genre == "action") | (mov$Genre == "adventure") | (mov$Genre == "animation") | (mov$Genre == "comedy") | (mov$Genre == "drama")
filt2 <- (mov$Studio == "Buena Vista Studios") | (mov$Studio == "WB") | (mov$Studio == "Fox") | (mov$Studio == "Universal") | (mov$Studio == "Sony") | (mov$Studio == "Paramount Pictures")
mov2 <- mov[filt & filt2,]
summary(mov) #column summaries
str(mov2)
str(mov2)
summary(mov2)
p <- ggplot(data=mov2, aes(x=Genre, y=Gross % US))
p <- ggplot(data=mov2, aes(x=Genre, y="Gross % US"))
p #Nothing happens. We need a geom.
geom_point()
p +
geom_point()
nstead of the points
p +
geom_boxplot()
p +
geom_boxplot()
p <- ggplot(data=mov2, aes(x=Genre, y=Gross...US))
p #Nothing happens. We need a geom.
p +
p +
geom_point()
p +
geom_point()
p +
geom_boxplot()
p +
geom_boxplot() +
geom_point()
p +
geom_boxplot() +
geom_jitter()
p +
geom_jitter() +
geom_boxplot()
p +
geom_jitter() +
geom_boxplot(alpha=0.7)
p +
geom_jitter(aes(size=Budget...mill., colour=Studio)) +
geom_boxplot(alpha=0.7)
p +
geom_jitter(aes(size=Budget...mill., colour=Studio)) +
geom_boxplot(alpha = 0.7, outlier.colour = NA)
q <- p +
geom_jitter(aes(size=Budget...mill., colour=Studio)) +
geom_boxplot(alpha = 0.7, outlier.colour = NA)
q
q <- q +
xlab("Genre") + #x axis title
ylab("Gross % US") + #y axis title
main("Domestic Gross % by Genre") #plot title
q <- q +
xlab("Genre") + #x axis title
ylab("Gross % US") + #y axis title
main.title("Domestic Gross % by Genre") #plot title
q <- q +
xlab("Genre") + #x axis title
ylab("Gross % US") + #y axis title
ggtitle("Domestic Gross % by Genre") #plot title
q
q <- q +
theme(
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.text = element_text(size=12)
)
q
q$labels$size = "Budget $M"
q
getwd()
df <- read.csv("C:/Users/Gaelan/Desktop/TOM/HR Master 2016.csv")
df <- read.csv("C:/Users/Gaelan/Desktop/TOM/TOM files/HR Master 2016.csv")
str(df)
leaver_df <- df[df$FT.Turnover.Indicator = 1]
leaver_df <- df[df$FT.Turnover.Indicator == 1,]
leaver_df
head(leaver_df)
df <- read.csv("C:/Users/Gaelan/Desktop/TOM/TOM files/HR Master 2016.csv")
str(df)
leaver_df <- df[df$FT.Turnover.Indicator == 1,]
head(leaver_df)
ggplot(data=leaver_df, x=Month, y=FT Turnover Indicator) + geom_hist()
ggplot(data=leaver_df, x=Month, y="FT Turnover Indicator") + geom_hist()
library(ggplot2)
ggplot(data=leaver_df, x=Month, y=FT Turnover Indicator) + geom_hist()
ggplot(data=leaver_df, x=Month, y=FT Turnover Indicator) + geom_histogram()
ggplot(data=leaver_df, x=Month, y=FT.Turnover.Indicator) + geom_histogram()
ggplot(data=leaver_df, x=Month, y=FT.Turnover.Indicator) + geom_point()
ggplot(data=leaver_df) + geom_point(x=Month, y=FT.Turnover.Indicator)
head(leaver_df)
ggplot(data=leaver_df) + geom_point(aes(x=Month, y=FT.Turnover.Indicator)
ggplot(data=leaver_df, aes(x=Month)) + geom_histogram()
ggplot(data=leaver_df, aes(x=Month)) + geom_histogram()
ggplot(data=leaver_df, aes(x=Month)) + geom_histogram(stat="count")
ggplot(data=leaver_df, aes(x=Month)) + geom_histogram(binwidth=1, stat="count")
ggplot(data=leaver_df, aes(x=Lazada.Location)) + geom_histogram()
ggplot(data=leaver_df, aes(x=Lazada.Location)) + geom_histogram(binwidth = 1)
ggplot(data=leaver_df, aes(x=Lazada.Location)) + geom_histogram(stat="count", binwidth = 1)
ggplot(data=leaver_df, aes(x=Lazada.Location)) + geom_histogram(stat="count")
a <- ggplot(data=leaver_df, aes(x=Month))
a + geom_histogram(binwidth=10)
a + geom_point()
a + geom_point(aes(y=Lazada.Location))
a + geom_bar(aes(y=Lazada.Location))
a + geom_bar()
a + geom_bar(aes(colour=Lazada.Location))
a + geom_bar(aes(fill=Lazada.Location))
a + geom_bar(aes(fill=Lazada.Location), colour="Black")
a + geom_bar(aes(fill=Gender), colour="Black")
+ facet_wrap(~ Lazada.Location)
+ facet_wrap(~ Gender)
a + geom_bar(aes(fill=Gender), colour="Black")
+ facet_wrap(~ Gender)
a + geom_bar(aes(fill=Gender), colour="Black")
+ facet_wrap(~ Division)
a + geom_bar(aes(fill=Gender), colour="Black") +
facet_wrap(~ Division)
a + geom_bar(aes(fill=Gender), colour="Black") +
facet_wrap(~ Lazada.Location)
leaver_df <- df[df$c(FT.Turnover.Indicator == 1, Termination Type == "Voluntary"),]
leaver_df <- df[c(df$FT.Turnover.Indicator == 1, df$Termination Type == "Voluntary"),]
a <- ggplot(data=leaver_df, aes(x=Month))
a + geom_bar(aes(fill=Gender), colour="Black"), x=Month, y=FT.Turnover.Indicator) +
facet_wrap(~ Division)
a + geom_bar(aes(fill=Gender), colour="Black"), x=Month, y=FT.Turnover.Indicator) +
facet_wrap(~ Division)
a + geom_bar(aes(fill=Gender), colour="Black", x=Month, y=FT.Turnover.Indicator) +
facet_wrap(~ Division)
leaver_df <- df[df$FT.Turnover.Indicator == 1,]
head(leaver_df)
library(ggplot2)
a <- ggplot(data=leaver_df, aes(x=Month))
a + geom_bar(aes(fill=Gender), colour="Black", x=Month, y=FT.Turnover.Indicator) +
facet_wrap(~ Division)
a + geom_bar(aes(fill=Gender,y=FT.Turnover.Indicator), colour="Black") +
facet_wrap(~ Division)
a + geom_bar(aes(fill=Gender), colour="Black") +
facet_wrap(~ Lazada.Location)
df <- read.csv("C:/Users/Gaelan/Desktop/TOM/TOM files/HR Master 2016.csv")
str(df)
leaver_df <- df[df$FT.Turnover.Indicator == 1,]
head(leaver_df)
library(ggplot2)
a <- ggplot(data=leaver_df, aes(x=Month))
a + geom_bar(aes(fill=Gender), colour="Black") +
a + geom_bar(aes(fill=Gender), colour="Black") +
facet_wrap(~ Lazada.Location)
df <- read.csv("C:/Users/Gaelan/Desktop/TOM/TOM files/HR Master 2016.csv")
str(df)
leaver_df <- df[df$FT.Turnover.Indicator == 1,]
head(leaver_df)
library(ggplot2)
a <- ggplot(data=leaver_df, aes(x=Month))
a + geom_bar(aes(fill=Gender), colour="Black") +
facet_wrap(~ Lazada.Location)
df <- read.csv("C:/Users/Gaelan/Desktop/TOM/TOM files/HR Master 2016.csv")
leaver_df <- df[df$FT.Turnover.Indicator == 1,]
a <- ggplot(data=leaver_df, aes(x=Month))
a + geom_bar(aes(fill=Gender), colour="Black") +
facet_wrap(~ Lazada.Location)
a + geom_bar(aes(fill=Gender), colour="Black") +
facet_wrap(~ Lazada.Location) +
theme(axis.text.x = element_text(angle=90, hjust=1))
a + geom_bar(aes(fill=Termination.Type), colour="Black") +
facet_wrap(~ Lazada.Location) +
theme(axis.text.x = element_text(angle=90, hjust=1))
df <- read.csv("C:/Users/Gaelan/Desktop/TOM/TOM files/HR Master 2016.csv")
leaver_df <- df[df$FT.Turnover.Indicator == 1,]
a <- ggplot(data=leaver_df, aes(x=Month))
a + geom_bar(aes(fill=Termination.Type), colour="Black") +
facet_wrap(~ Lazada.Location) +
theme(axis.text.x = element_text(angle=90, hjust=1))
library(reshape2)
# Natural Language Processing
# Importing the dataset
dataset = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
# CLeaning the tests
# install.packages('tm')
# install.packages('SnowballC')
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset$Review))
# Corpus to lowercase
corpus = tm_map(corpus, content_transformer(tolower))
# Corpus to remove numbers
corpus = tm_map(corpus, removeNumbers)
# Corpus to remove punctuation
corpus = tm_map(corpus, removePunctuation)
# Corpus to remove irrelevant words (SnowballC package required)
corpus = tm_map(corpus, removeWords, stopwords())
# Stemming the Corpus
corpus = tm_map(corpus, stemDocument)
# Corpus to remove extra spaces
corpus = tm_map(corpus, stripWhitespace)
setwd("~/Dropbox/#Documents/#R Scripts/Machine Learning/Part 7 - Natural Language Processing/Section 36 - Preprocessing Text Data + Bag-of-words Model")
# Natural Language Processing
# Importing the dataset
dataset = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
# CLeaning the tests
# install.packages('tm')
# install.packages('SnowballC')
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset$Review))
# Corpus to lowercase
corpus = tm_map(corpus, content_transformer(tolower))
# Corpus to remove numbers
corpus = tm_map(corpus, removeNumbers)
# Corpus to remove punctuation
corpus = tm_map(corpus, removePunctuation)
# Corpus to remove irrelevant words (SnowballC package required)
corpus = tm_map(corpus, removeWords, stopwords())
# Stemming the Corpus
corpus = tm_map(corpus, stemDocument)
# Corpus to remove extra spaces
corpus = tm_map(corpus, stripWhitespace)
# Creating the Bag of Words model
dtm = DocumentTermMatrix(corpus)
dtm
dtm = removeSparseTerms(dtm, 0.99)
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dtm
dataset = as.data.frame(dtm)
dataset = as.data.frame(as.matrix(dtm))
View(dataset)
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
dataset$Liked = dataset_original$Liked
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Random Forest Classification to the Training set
library(randomForest)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
cm
(79+70)/200
setwd("~/Dropbox/#Documents/#R Scripts/Machine Learning/Part 8 - Deep Learning/Section 40 - Artificial Neural Networks (ANN)")
dataset = read.csv('Churn_Modelling.csv')
View(dataset)
dataset = dataset[4:14]
# Encoding the categorical variables as factor
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
View(training_set)
install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6, 6),
epochs = 100,
train_samples_per_iteration = -2)
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
y_pred
cm = table(test_set[, 11], y_pred)
cm
h2o.shutdown()
